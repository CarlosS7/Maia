// Code extracted from:
// http://martinsikora.com/nodejs-and-websocket-simple-chat-tutorial 

// http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/
"use strict";
 
// Optional. You will see this name in eg. 'ps' or 'top' command
process.title = 'maia-server';
 
// Port where we'll run the websocket server
var webSocketsServerPort = 1337;
 
// websocket and http servers
var webSocketServer = require('websocket').server;
var http = require('http');
var express = require('express');
var app = express();
 
app.use(express.static('public'))

/**
 * Global variables
 */
// list of currently connected clients (users)
var clients = [ ];
// list of subscriptions
var subscriptions = {};

/**
 * Helper function for escaping input strings
 */
function htmlEntities(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;')
                      .replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}
 
/**
 * HTTP server
 */
var server = http.createServer(app);
server.listen(webSocketsServerPort, function() {
    console.log((new Date()) + " Server is listening on port " + webSocketsServerPort);
});


/**
 * WebSocket server
 */
var wsServer = new webSocketServer({
    // WebSocket server is tied to a HTTP server. WebSocket request is just
    // an enhanced HTTP request. For more info http://tools.ietf.org/html/rfc6455#page-6
    httpServer: server
});

var separator = "::";

function plainAdd(path,connection,tree){
    var leaf = tree;
    for(var token in path){
        var key = path[token];
        if(!leaf[key]){
            leaf[key] = {};
        }
        leaf = leaf[key]
    }
    if(!leaf._subscribers){
        leaf._subscribers = [connection,];
    } else {
        leaf._subscribers.push(connection);
    }
}

function recursiveSearch(tokens, tree, parentN){
    var results = [];
    var key = tokens[0];
    var nextTokens = tokens.slice(1);
    if(nextTokens.length < 1){
        if(key == '*' || key === '**'){
            results.push(key);
        }if(tree[
            results.
        }tree[key] && (!tree[key] || (tree[key].length ==1 && tree[key]['_subscribers']))){
            results.push(key);
        }
    }else{
        if(key === '**'){
            for(var inTree in tree){
                results.push(recursiveSearch(tokens,tree[inTree],inTree));
            }
        }else if(key === '*'){
            for(var inTree in tree){
                if(inTree !== "_subscribers"){
                    results.push(recursiveSearch(nextTokens,tree[inTree],inTree));
                }
            }
        }
        if(tree[key]){
            results.push(recursiveSearch(nextTokens,tree[key],key));
        }
        if(tree['*']){
            results.push(recursiveSearch(nextTokens,tree['*'],'*'));
        }
        if(tree['**']){
            results.push(recursiveSearch(nextTokens,tree['**'],'**'));
            results.push(recursiveSearch(nextTokens,tree,'**'));
        }
    }
    console.log('Trying with tokens['+tokens+'] and tree: '+JSON.stringify(tree));
    console.log('Results: '+JSON.stringify(results));
    if(parentN !== "" && results.length > 0){
        for(var result in results){
            if(results[result].length > 0){
                results[result]=parentN+'::'+results[result];
            }else{
                results.splice(result,1);
            }
        }
    }
    return results;
}


function subscribe(name,connection){
    var tokens = name.split(separator);
}

function sendToSubscribed(event){
    var tokens = event.name.split(separator);
    var results = recursiveSearch(tokens,subscriptions,'')
    console.log(">>Results: "+results);

}

// This callback function is called every time someone
// tries to connect to the WebSocket server
wsServer.on('request', function(request) {
    console.log((new Date()) + ' Connection from origin ' + request.origin + '.');
 
    // accept connection - you should check 'request.origin' to make sure that
    // client is connecting from your website
    // (http://en.wikipedia.org/wiki/Same_origin_policy)
    var connection = request.accept(null, request.origin); 
    // we need to know client index to remove them on 'close' event
    var index = clients.push(connection) - 1;

    console.log((new Date()) + ' Connection accepted.');
    console.log('Connection: ' + connection);
    connection.on('message', function(message) {
            // log and broadcast the message
            console.log((new Date()) + ' Received Message from '
                        + connection.name + ': ' + message.utf8Data);
            
            var msg = JSON.parse(message.utf8Data);
            // we want to keep history of all sent messages
            if(msg.name === 'username'){
                connection.name = msg.text;
            }else if (msg.name === 'subscribe'){
                var name = msg.text;
                var tokens = name.split(separator)
                console.log('Subscribing: ' + tokens);
                plainAdd(tokens,'prueba',subscriptions);
                console.log('Subscriptions: ');
                console.log(subscriptions);
            }else {
                var obj = {
                    name: msg.name,
                    time: (new Date()).getTime(),
                    text: htmlEntities(msg.text),
                };

                // broadcast message to all connected clients
                var json = JSON.stringify(obj);
                sendToSubscribed(obj);
//                 for (var i=0; i < clients.length; i++) {
//                     clients[i].sendUTF(json);
//                 }
            }
        
    });
 
    // user disconnected
    connection.on('close', function(connection) {
        console.log((new Date()) + " Peer "
            + connection.remoteAddress + " disconnected.");
        // remove user from the list of connected clients
        clients.splice(index, 1);
    });
 
});


